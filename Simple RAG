{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8166676,"sourceType":"datasetVersion","datasetId":4832604}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/patteg21/simple-rag?scriptVersionId=173209235\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install pymupdf\nimport fitz    # for reading my pdf","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Reading PDF","metadata":{}},{"cell_type":"code","source":"pdf_path = '/kaggle/input/sony-speech/23q3_sonyspeech.pdf'\n\ndoc = fitz.open(pdf_path)\nlines = []\n\nfor page in doc:\n    text = page.get_text(\"text\")\n    # Split text into lines\n    page_lines = text.split('\\n')\n    lines.extend(page_lines)\n\ndoc.close()\n\nprint(f'Number of Lines: {len(lines)}', end='\\n\\n')\nprint(f'Small Sample:\\n {lines[1]}') # lines","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Create a Search Engine\n- FAISS for quick use case for Dense Embeddings, utilizes Cosine Sim\n- Alternatively use TF-IDF or BM-25 for Sparse Embeddings","metadata":{}},{"cell_type":"code","source":"!pip install faiss-cpu\nimport faiss\nimport numpy as np\n!pip install transformers\nfrom transformers import BertModel, BertTokenizer\nimport torch","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Embeddings on the Text","metadata":{}},{"cell_type":"code","source":"model_name = 'bert-base-uncased'     # bert likely is not the best, but for ease i'll use it\ntokenizer = BertTokenizer.from_pretrained(model_name)\nmodel = BertModel.from_pretrained(model_name)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_embeddings(text):\n    inputs = tokenizer(text, return_tensors='pt', padding=True, truncation=True, max_length=512)\n    outputs = model(**inputs)\n    return outputs.last_hidden_state[:, 0, :].squeeze().detach().numpy()\n\ndef build_faiss_index(vectors):\n    dimension = vectors.shape[1]\n    index = faiss.IndexFlatL2(dimension)  # Using L2 distance for similarity\n    index.add(vectors)  # Adding the vectors to the index\n    return index\n\ndef search_index(query, index, k=3):  # k is num of returns\n    query_vector = get_embeddings(query).reshape(1, -1)\n    distances, indices = index.search(query_vector, k)\n    return distances, indices","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"vectors = np.array([get_embeddings(text) for text in lines])\n\nINDEX = build_faiss_index(vectors)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Same Search\nquery = \"Marvel Movies\"\ndistances, indices = search_index(query, INDEX, k=3)\nprint(\"Distances:\", distances[0])\nprint(\"Indices:\", indices[0])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## OpenAI API Call","metadata":{}},{"cell_type":"code","source":"!pip install google\nimport google.generativeai as genai\nfrom kaggle_secrets import UserSecretsClient\nimport ast","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:50:09.654761Z","iopub.execute_input":"2024-04-21T20:50:09.655189Z","iopub.status.idle":"2024-04-21T20:50:26.31941Z","shell.execute_reply.started":"2024-04-21T20:50:09.655157Z","shell.execute_reply":"2024-04-21T20:50:26.317117Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# get API Key\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"GEMINI_API_KEY\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:45:29.658739Z","iopub.execute_input":"2024-04-21T20:45:29.659278Z","iopub.status.idle":"2024-04-21T20:45:29.873214Z","shell.execute_reply.started":"2024-04-21T20:45:29.659233Z","shell.execute_reply":"2024-04-21T20:45:29.871849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Gemini Model\ngenai.configure(api_key=secret_value_0)\nMODEL = genai.GenerativeModel('gemini-pro')\nresponse = MODEL.generate_content(\"What is the meaning of life?\")\nresponse.text","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:45:29.878084Z","iopub.execute_input":"2024-04-21T20:45:29.87852Z","iopub.status.idle":"2024-04-21T20:45:36.929565Z","shell.execute_reply.started":"2024-04-21T20:45:29.878487Z","shell.execute_reply":"2024-04-21T20:45:36.928099Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Prompting","metadata":{}},{"cell_type":"code","source":"# Prompt Token\nPROMPT = \"\"\"\nYou are a Finicial Analyst that is responsible for answering questions about a specific doucment. \nYou will be provided some additional information related to your specific use case. ENSURE ACCURACY.\n\nFirst rewrite the query or question that is given. Inlcude more details in the query to enable better search\n\nIf the orginal provided sufficient information to respond to the question, make valid == True\nIf it did not make it False.\n\n\nRESPOND IN THIS FORMAT:\n\n{\n    'response': <response>,\n    'query_rewrite': <rewritten_query>,\n    'valid': <bool>\n}\n\nThe Following is Document Context and the query from the User:\n\"\"\"\n\nRESPONSE_PROMPT = \"\"\"\nYou are a Finicial Analyst that is responsible for answering questions about a specific doucment. \nYou will be provided some additional information related to your specific documents. ENSURE ACCURACY.\n\n\nRESPOND IN THIS FORMAT:\n\n{'response': <response>, 'valid': <bool>}\n\nThe Following is Document Context and the query from the User:\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-04-21T21:00:23.270676Z","iopub.execute_input":"2024-04-21T21:00:23.271199Z","iopub.status.idle":"2024-04-21T21:00:23.279032Z","shell.execute_reply.started":"2024-04-21T21:00:23.271162Z","shell.execute_reply":"2024-04-21T21:00:23.277625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_response(query, chat_context=[], index=INDEX, k=5, model=MODEL, lines=lines):\n    master_query = f\"\"\"\n    User Query: {query}\n    \n    Provided Documents:\n    \"\"\"\n    \n    # handle search\n    distances, indices = search_index(query, index, k=3)\n   \n    section = []\n\n    for i in indices[0]:\n        sec = lines[max(0, i-5):min(len(lines),i+5)]  \n        section.extend(sec)\n    doc_string = '\\n'.join(section)\n\n    rewritten_query = model.generate_content(PROMPT + master_query + doc_string)\n    res = ast.literal_eval(rewritten_query.text)\n    if res['valid'] == False:\n        print(res['response'])\n        print('Rewriting query...')\n        \n        query_rewrite = res['query_rewrite']\n        \n        distances, indices = search_index(query_rewrite, index, k=3)\n        section = []\n        for i in indices[0]:\n            sec = lines[max(0, i-5):min(len(lines),i+5)]  \n            section.extend(sec)\n        doc_string = '\\n'.join(section)\n    \n        response =  model.generate_content( RESPONSE_PROMPT + master_query)\n        \n        return response.text\n    else:\n        return res['response']","metadata":{"execution":{"iopub.status.busy":"2024-04-21T21:00:26.038721Z","iopub.execute_input":"2024-04-21T21:00:26.039608Z","iopub.status.idle":"2024-04-21T21:00:26.055613Z","shell.execute_reply.started":"2024-04-21T21:00:26.039563Z","shell.execute_reply":"2024-04-21T21:00:26.053749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Test","metadata":{}},{"cell_type":"code","source":"import pprint","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:57:49.958704Z","iopub.execute_input":"2024-04-21T20:57:49.959434Z","iopub.status.idle":"2024-04-21T20:57:49.966818Z","shell.execute_reply.started":"2024-04-21T20:57:49.959386Z","shell.execute_reply":"2024-04-21T20:57:49.964927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"query = \"\"\"\n\nProvide some information about opertating cash flow \n\n\"\"\"\n\npprint.pprint(create_response(query, chat_context=chat_context))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T21:00:29.826505Z","iopub.execute_input":"2024-04-21T21:00:29.826937Z","iopub.status.idle":"2024-04-21T21:00:32.299578Z","shell.execute_reply.started":"2024-04-21T21:00:29.826902Z","shell.execute_reply":"2024-04-21T21:00:32.298297Z"},"trusted":true},"execution_count":null,"outputs":[]}]}